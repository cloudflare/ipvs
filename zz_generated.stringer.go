// Code generated by "stringer -type=ForwardType,AddressFamily,Protocol,TunnelType,TunnelFlags --output zz_generated.stringer.go"; DO NOT EDIT.

package ipvs

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Masquerade-0]
	_ = x[Local-1]
	_ = x[Tunnel-2]
	_ = x[DirectRoute-3]
	_ = x[Bypass-4]
}

const _ForwardType_name = "MasqueradeLocalTunnelDirectRouteBypass"

var _ForwardType_index = [...]uint8{0, 10, 15, 21, 32, 38}

func (i ForwardType) String() string {
	if i >= ForwardType(len(_ForwardType_index)-1) {
		return "ForwardType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ForwardType_name[_ForwardType_index[i]:_ForwardType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[INET-2]
	_ = x[INET6-10]
}

const (
	_AddressFamily_name_0 = "INET"
	_AddressFamily_name_1 = "INET6"
)

func (i AddressFamily) String() string {
	switch {
	case i == 2:
		return _AddressFamily_name_0
	case i == 10:
		return _AddressFamily_name_1
	default:
		return "AddressFamily(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TCP-6]
	_ = x[UDP-17]
	_ = x[SCTP-132]
}

const (
	_Protocol_name_0 = "TCP"
	_Protocol_name_1 = "UDP"
	_Protocol_name_2 = "SCTP"
)

func (i Protocol) String() string {
	switch {
	case i == 6:
		return _Protocol_name_0
	case i == 17:
		return _Protocol_name_1
	case i == 132:
		return _Protocol_name_2
	default:
		return "Protocol(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IPIP-0]
	_ = x[GUE-1]
	_ = x[GRE-2]
}

const _TunnelType_name = "IPIPGUEGRE"

var _TunnelType_index = [...]uint8{0, 4, 7, 10}

func (i TunnelType) String() string {
	if i >= TunnelType(len(_TunnelType_index)-1) {
		return "TunnelType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TunnelType_name[_TunnelType_index[i]:_TunnelType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TunnelEncapNoChecksum-0]
	_ = x[TunnelEncapChecksum-1]
	_ = x[TunnelEncapRemoteChecksum-2]
}

const _TunnelFlags_name = "TunnelEncapNoChecksumTunnelEncapChecksumTunnelEncapRemoteChecksum"

var _TunnelFlags_index = [...]uint8{0, 21, 40, 65}

func (i TunnelFlags) String() string {
	if i >= TunnelFlags(len(_TunnelFlags_index)-1) {
		return "TunnelFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TunnelFlags_name[_TunnelFlags_index[i]:_TunnelFlags_index[i+1]]
}
